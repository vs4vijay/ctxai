name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run full test suite
        run: |
          uv run ruff check .
        #   uv run ruff format --check .

      - name: Validate version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
            PROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
            if [[ "$TAG_VERSION" != "$PROJECT_VERSION" ]]; then
              echo "Tag version ($TAG_VERSION) doesn't match project version ($PROJECT_VERSION)"
              exit 1
            fi
          fi

  build:
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ github.event.inputs.version }}"
            VERSION=${VERSION#v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        run: uv build

      - name: Check package
        run: |
          uv run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.version.outputs.version }}
          path: dist/

  release:
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build.outputs.version }}
          path: dist/

      # - name: Generate changelog
      #   id: changelog
      #   run: |
      #     # Get the previous tag
      #     PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
      #     CURRENT_TAG=${GITHUB_REF#refs/tags/}

      #     # Generate changelog
      #     if [[ -n "$PREV_TAG" ]]; then
      #       echo "## Changes since $PREV_TAG" > CHANGELOG.md
      #       git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
      #     else
      #       echo "## Initial Release" > CHANGELOG.md
      #       git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
      #     fi

      #     # Set multiline output
      #     {
      #       cat CHANGELOG.md
      #     } >> $GITHUB_OUTPUT

      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     tag_name: ${{ github.ref_name }}
      #     name: Release ${{ github.ref_name }}
      #     body: ${{ steps.changelog.outputs.changelog }}
      #     files: dist/*
      #     draft: false
      #     prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  publish:
    runs-on: ubuntu-latest
    needs: [validate, build, release]
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc')
    environment: pypi

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build.outputs.version }}
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true
